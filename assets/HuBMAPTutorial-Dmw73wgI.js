import{b as f}from"./QBtn-ZvH--BcW.js";import{Q as l}from"./QCard-fR6UAp2d.js";import{u as _,Q as b}from"./EditorStore-CAmloR2w.js";import{Q as v}from"./QPage-T5vlnsNv.js";import{U as w}from"./UDIVis-B7qK2qN4.js";import{l as t}from"./constants-BVGa0-OV.js";import{d as q,E as x,F as r,H as o,J as e,L as i,M as p,P as m,N as u,I as s,O as d,a9 as k}from"./index-D0kcswQW.js";import{_ as B}from"./_plugin-vue_export-helper-DlAUqK2U.js";import"./QSpinner-B0uOXoNR.js";const T=[{name:"1. Simple Table",description:"This is a table of raw metadata for every available dataset, with no transformations applied. All that is defined is the source and the representation, which specifies that all data fields should be shown as rows of text.",spec:{source:{name:"datasets",source:t.datasets}}},{name:"2. Table with Derived Fields",description:"We can modify the previous spec to derive a new field from the existing data. In this case, we derive the organ of origin for each dataset from the `origin_samples_unique_mapped_organs` field, then group the datasets by this derived organ field and count how many datasets correspond to each organ.",spec:{source:{name:"datasets",source:t.datasets},transformation:[{derive:{organ:"d.origin_samples_unique_mapped_organs"}},{groupby:["organ"]},{rollup:{count:{op:"count"}}}]},highlightLines:[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]},{name:"3. Bar Chart",description:'To create a simple bar chart that shows the number of datasets per organ, we can add a representation that specifies the mark type ("bar") and the x and y encodings to represent the organ and count, respectively.',spec:{source:{name:"datasets",source:t.datasets},transformation:[{derive:{organ:"d.origin_samples_unique_mapped_organs"}},{groupby:["organ"]},{rollup:{count:{op:"count"}}}],representation:[{mark:"bar",mapping:[{encoding:"x",field:"organ",type:"nominal"},{encoding:"y",field:"count",type:"quantitative"}]}]},highlightLines:[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]},{name:"4. Stacked Bar Chart",description:"We can further enhance the bar chart by stacking it based on the assay category. This allows us to see not only the number of datasets per organ but also how many datasets correspond to each assay type within those organs. We achieve this by adding an additional encoding for color, which represents the assay category.",spec:{source:{name:"datasets",source:t.datasets},transformation:[{derive:{organ:"d.origin_samples_unique_mapped_organs"}},{groupby:["organ","assay_category"]},{rollup:{count:{op:"count"}}}],representation:{mark:"bar",mapping:[{encoding:"x",field:"organ",type:"nominal"},{encoding:"y",field:"count",type:"quantitative"},{encoding:"color",field:"assay_category",type:"nominal"}]}},highlightLines:[15,39,40,41,42,43]},{name:"5. Heatmap",description:"Now we can visualize the same data as a heatmap by modifying the mark type and mappings.",spec:{source:{name:"datasets",source:t.datasets},transformation:[{derive:{organ:"d.origin_samples_unique_mapped_organs"}},{groupby:["organ","assay_category"]},{rollup:{count:{op:"count"}}}],representation:[{mark:"rect",mapping:[{encoding:"x",field:"organ",type:"nominal"},{encoding:"y",field:"assay_category",type:"nominal"},{encoding:"color",field:"count",type:"quantitative",range:["#eafab9","#528aeb"]}]}]},highlightLines:[28,37,38,42,43,44,45,46,47]},{name:"6. Heatmap with Text Overlay",description:"Finally, we add an additional representation spec to overlay the count text onto the heatmap.",spec:{source:{name:"datasets",source:t.datasets},transformation:[{derive:{organ:"d.origin_samples_unique_mapped_organs"}},{groupby:["organ","assay_category"]},{rollup:{count:{op:"count"}}}],representation:[{mark:"rect",mapping:[{encoding:"x",field:"organ",type:"nominal"},{encoding:"y",field:"assay_category",type:"nominal"},{encoding:"color",field:"count",type:"quantitative",range:["#eafab9","#528aeb"]}]},{mark:"text",mapping:[{encoding:"x",field:"organ",type:"nominal"},{encoding:"y",field:"assay_category",type:"nominal"},{encoding:"text",field:"count",type:"quantitative"}]}]},highlightLines:[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70]}],L={class:"tutorial-container q-mt-lg"},S={class:"row items-center q-mb-md"},H={class:"text-subtitle1 text-bold text-primary"},Q={class:"text-body1 q-mb-md"},C={class:"col-12 col-md-6"},P={class:"code-block"},z={class:"col-12 col-md-6"},A=q({__name:"HuBMAPTutorial",setup(E){const g=_();return(I,n)=>(o(),x(v,{class:"column items-center justify-start q-ma-md"},{default:r(()=>[e("div",L,[n[0]||(n[0]=e("p",{class:"text-h4 text-primary text-bold"}," HuBMAP Visualization Tutorial ",-1)),n[1]||(n[1]=e("p",{class:"text-body1 q-mb-lg"}," This tutorial walks through the process of how the UDI grammar can be used to create a heatmap visualization showing HuBMAP dataset counts by source organ and assay type. ",-1)),(o(!0),i(u,null,p(m(T),(a,h)=>(o(),i("div",{key:h,class:"q-mb-xl full-width"},[e("div",S,[e("div",H,d(a.name),1),s(f,{color:"primary",rounded:"","no-caps":"","icon-right":"open_in_new",to:m(g).getUrlWithSpec(a.spec),label:"Editor",class:"q-ml-md"},null,8,["to"])]),e("div",Q,d(a.description),1),e("div",C,[s(l,{flat:"",bordered:"",class:"q-pa-md bg-grey-1 full-height"},{default:r(()=>[e("div",P,[(o(!0),i(u,null,p(JSON.stringify(a.spec,null,2).split(`
`),(y,c)=>(o(),i("div",{key:c,class:k(["code-line",{"highlight-line":a.highlightLines?.includes(c+1)}])},d(y),3))),128))])]),_:2},1024)]),e("div",z,[s(l,{flat:"",bordered:"",class:"q-pa-md viz-container full-height"},{default:r(()=>[s(w,{spec:a.spec},null,8,["spec"])]),_:2},1024)]),s(b,{class:"q-my-md"})]))),128))])]),_:1}))}}),j=B(A,[["__scopeId","data-v-4e0deeec"]]);export{j as default};
